// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

@ffi.Native<ffi.Pointer<StreamPlayer> Function()>()
external ffi.Pointer<StreamPlayer> stream_player_alloc();

@ffi.Native<
    ffi.Int Function(ffi.Pointer<StreamPlayer>, ffi.Uint32, ffi.Uint32,
        ffi.Uint32, ffi.Pointer<ffi.Char>)>()
external int stream_player_init(
  ffi.Pointer<StreamPlayer> self,
  int channel_count,
  int sample_rate,
  int period_size_in_frames,
  ffi.Pointer<ffi.Char> stream_name,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<StreamPlayer>)>()
external void stream_player_uninit(
  ffi.Pointer<StreamPlayer> self,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<StreamPlayer>, ffi.Pointer<ffi.Void>, ffi.Uint32)>()
external int stream_player_buffer_write(
  ffi.Pointer<StreamPlayer> self,
  ffi.Pointer<ffi.Void> data,
  int framesToWrite,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<StreamPlayer>)>()
external int stream_player_start(
  ffi.Pointer<StreamPlayer> self,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<StreamPlayer>)>()
external int stream_player_stop(
  ffi.Pointer<StreamPlayer> self,
);

@ffi.Native<ffi.Pointer<StreamRecorder> Function()>()
external ffi.Pointer<StreamRecorder> stream_recorder_alloc();

@ffi.Native<
    ffi.Int Function(ffi.Pointer<StreamRecorder>, ffi.Uint32, ffi.Uint32,
        ffi.Uint32, DataAvalibleCallback)>()
external int stream_recorder_init(
  ffi.Pointer<StreamRecorder> self,
  int channel_count,
  int sample_rate,
  int period_size_frames,
  DataAvalibleCallback data_avalible_callback,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<StreamRecorder>, ffi.Pointer<ffi.Void>, ffi.Uint32)>()
external int stream_recorder_read_buffer(
  ffi.Pointer<StreamRecorder> self,
  ffi.Pointer<ffi.Void> data,
  int framesToRead,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<StreamRecorder>)>()
external void stream_recorder_uninit(
  ffi.Pointer<StreamRecorder> self,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<StreamRecorder>)>()
external int stream_recorder_start(
  ffi.Pointer<StreamRecorder> self,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<StreamRecorder>)>()
external int stream_recorder_stop(
  ffi.Pointer<StreamRecorder> self,
);

final class StreamPlayer extends ffi.Opaque {}

final class StreamRecorder extends ffi.Opaque {}

typedef DataAvalibleCallbackFunction = ffi.Void Function();
typedef DartDataAvalibleCallbackFunction = void Function();
typedef DataAvalibleCallback
    = ffi.Pointer<ffi.NativeFunction<DataAvalibleCallbackFunction>>;
